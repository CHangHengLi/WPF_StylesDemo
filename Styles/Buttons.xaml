<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- 引用其他资源字典 -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Styles/Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- 基础按钮样式 -->
    <Style x:Key="BaseButtonStyle" TargetType="Button">
        <!-- 基本属性设置器 -->
        <Setter Property="Padding" Value="15,8"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter x:Name="contentPresenter" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- 禁用状态触发器 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 主题样式基类 (基于BaseButtonStyle) -->
    <Style x:Key="ThemeButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Style.Triggers>
            <!-- 根据CurrentTheme动态改变样式 -->
            <DataTrigger Binding="{Binding DataContext.CurrentTheme, RelativeSource={RelativeSource AncestorType=Window}}" Value="Blue">
                <Setter Property="Background" Value="{StaticResource Blue.PrimaryBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Blue.SecondaryBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.CurrentTheme, RelativeSource={RelativeSource AncestorType=Window}}" Value="Green">
                <Setter Property="Background" Value="{StaticResource Green.PrimaryBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Green.SecondaryBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.CurrentTheme, RelativeSource={RelativeSource AncestorType=Window}}" Value="Red">
                <Setter Property="Background" Value="{StaticResource Red.PrimaryBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Red.SecondaryBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.CurrentTheme, RelativeSource={RelativeSource AncestorType=Window}}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource Dark.PrimaryBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Dark.SecondaryBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- 默认按钮样式 -->
    <Style x:Key="DefaultButtonStyle" TargetType="Button" BasedOn="{StaticResource ThemeButtonStyle}">
        <Style.Triggers>
            <!-- 鼠标悬停触发器 -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Blue.SecondaryBrush}"/>
            </Trigger>
            <!-- 按下触发器 -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Blue.SecondaryBrush}"/>
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
            <!-- 鼠标悬停结合主题触发器 -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding DataContext.CurrentTheme, RelativeSource={RelativeSource AncestorType=Window}}" Value="Green"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Green.SecondaryBrush}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding DataContext.CurrentTheme, RelativeSource={RelativeSource AncestorType=Window}}" Value="Red"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Red.SecondaryBrush}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding DataContext.CurrentTheme, RelativeSource={RelativeSource AncestorType=Window}}" Value="Dark"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource Dark.SecondaryBrush}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- 圆角按钮样式 -->
    <Style x:Key="RoundButtonStyle" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="20">
                        <ContentPresenter x:Name="contentPresenter" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 成功按钮样式 -->
    <Style x:Key="SuccessButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="{StaticResource Blue.SuccessBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Blue.SuccessBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Green.SuccessBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Green.SuccessBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Green.SuccessBrush}"/>
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 警告按钮样式 -->
    <Style x:Key="WarningButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="{StaticResource Blue.WarningBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Blue.WarningBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Red.WarningBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Red.WarningBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Red.WarningBrush}"/>
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 错误/危险按钮样式 -->
    <Style x:Key="DangerButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="{StaticResource Blue.ErrorBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Blue.ErrorBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Red.ErrorBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Red.ErrorBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Red.ErrorBrush}"/>
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- 圆角按钮模板样式 -->
    <Style x:Key="RoundedButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="15,8"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            CornerRadius="20">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.9"/>
                            <Setter TargetName="border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect BlurRadius="8" ShadowDepth="3" 
                                                      Color="#33000000" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.8"/>
                            <Setter TargetName="contentPresenter" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="0.98" ScaleY="0.98"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- 图标按钮模板样式 -->
    <Style x:Key="IconButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="grid">
                        <Ellipse x:Name="background" 
                                 Fill="{DynamicResource PrimaryBrush}" 
                                 Opacity="0"/>
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="background" Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="background" Property="Opacity" Value="0.4"/>
                            <Setter TargetName="contentPresenter" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 动画淡入淡出按钮样式 -->
    <Style x:Key="FadeButtonStyle" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Opacity" Value="0.8"/>
        <Style.Triggers>
            <!-- 鼠标进入时执行淡入动画 -->
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1.0" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            
            <!-- 鼠标离开时执行淡出动画 -->
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.8" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!-- 添加动画按钮样式 -->
    <Style x:Key="AnimatedButtonStyle" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Opacity" Value="0.8"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- 鼠标进入时执行淡入和放大动画 -->
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                            To="1.0" Duration="0:0:0.2"/>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX"
                                            To="1.05" Duration="0:0:0.2"/>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY"
                                            To="1.05" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            
            <!-- 鼠标离开时执行淡出和缩小动画 -->
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                            To="0.8" Duration="0:0:0.2"/>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX"
                                            To="1.0" Duration="0:0:0.2"/>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY"
                                            To="1.0" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- 脉冲动画按钮样式 -->
    <Style x:Key="PulseButtonStyle" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- 当按钮被点击时播放脉冲动画 -->
            <EventTrigger RoutedEvent="Button.Click">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX"
                                             From="1" To="0.9" Duration="0:0:0.1" 
                                             AutoReverse="True"/>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY"
                                             From="1" To="0.9" Duration="0:0:0.1" 
                                             AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <!-- 多层次样式继承示例 -->
    
    <!-- 基础层级：所有按钮的基本样式 -->
    <Style x:Key="BaseButtonStyle2" TargetType="Button">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="12,6"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Cursor" Value="Hand"/>
    </Style>

    <!-- 第二层级：定义外观 -->
    <Style x:Key="OutlinedButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle2}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}"/>
    </Style>

    <!-- 第三层级：不同状态和用途的具体样式 -->
    <Style x:Key="PrimaryOutlinedButtonStyle" TargetType="Button" BasedOn="{StaticResource OutlinedButtonStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Opacity" Value="0.9"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SuccessOutlinedButtonStyle" TargetType="Button" BasedOn="{StaticResource OutlinedButtonStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource Green.PrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource Green.PrimaryBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Green.PrimaryBrush}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Opacity" Value="0.9"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DangerOutlinedButtonStyle" TargetType="Button" BasedOn="{StaticResource OutlinedButtonStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource Red.PrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource Red.PrimaryBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Red.PrimaryBrush}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Opacity" Value="0.9"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary> 